# Tier 4: Full Stack with All Services
# Purpose: Complete development environment
# Test: docker-compose -f docker-compose.tier4-full.yml up
# Verify: All services running, all features accessible

version: '3.8'

services:
  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: puzzle-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - puzzle-network

  # SQL Server Database
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: puzzle-sqlserver
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=YourStrong@Passw0rd
      - MSSQL_PID=Developer
    ports:
      - "1433:1433"
    volumes:
      - sqlserver-data:/var/opt/mssql
    healthcheck:
      test: /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "YourStrong@Passw0rd" -Q "SELECT 1" || exit 1
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 20s
    networks:
      - puzzle-network

  # MQTT Broker
  mqtt:
    image: eclipse-mosquitto:2
    container_name: puzzle-mqtt
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./docker/mosquitto/config:/mosquitto/config:ro
      - mqtt-data:/mosquitto/data
      - mqtt-log:/mosquitto/log
    networks:
      - puzzle-network

  # TURN Server for WebRTC
  coturn:
    image: coturn/coturn:4.6-alpine
    container_name: puzzle-turn
    ports:
      - "3478:3478/udp"
      - "3478:3478/tcp"
      - "5349:5349/udp"
      - "5349:5349/tcp"
      - "49152-49200:49152-49200/udp"
    environment:
      - DETECT_EXTERNAL_IP=yes
      - EXTERNAL_IP=auto
      - LISTENING_PORT=3478
      - RELAY_MIN_PORT=49152
      - RELAY_MAX_PORT=49200
      - VERBOSE=1
      - FINGERPRINT=1
      - LT_CRED_MECH=1
      - USER=testuser:testpassword
      - REALM=puzzle.local
    networks:
      - puzzle-network

  # API Service (full configuration)
  api:
    build:
      context: .
      dockerfile: Dockerfile.minimal
    container_name: puzzle-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=CollaborativePuzzle;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=true
      - ConnectionStrings__Redis=redis:6379,abortConnect=false
      - Mqtt__Broker=mqtt
      - Mqtt__Port=1883
      - WebRTC__TurnServers__0__Urls=turn:coturn:3478
      - WebRTC__TurnServers__0__Username=testuser
      - WebRTC__TurnServers__0__Credential=testpassword
      - Logging__LogLevel__Default=Information
      - Logging__LogLevel__Microsoft.AspNetCore=Warning
      - Logging__LogLevel__Microsoft.AspNetCore.SignalR=Debug
    ports:
      - "5000:80"
    depends_on:
      redis:
        condition: service_healthy
      sqlserver:
        condition: service_healthy
      mqtt:
        condition: service_started
      coturn:
        condition: service_started
    volumes:
      - ./src/CollaborativePuzzle.Api/wwwroot:/app/wwwroot:ro
      - ./src/CollaborativePuzzle.Api/appsettings.Docker.json:/app/appsettings.Docker.json:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    networks:
      - puzzle-network

networks:
  puzzle-network:
    driver: bridge

volumes:
  redis-data:
  sqlserver-data:
  mqtt-data:
  mqtt-log: