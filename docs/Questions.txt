Why use EFCore in this project and not Dapper? Why in general?
What is the simple Peer in WebRTC?
How dies application gateway integreate with web sockets?
are all files in K8s folders yaml?
What is swashbuckler?
What is Message Pack?
What is Ice server for WebRTC?
WebRTC->TURN - how do they correlate?
What is Horitozontal Pod Auto Scaling?
What does Azure front door do? How do we choose it as a CDN vs. another?
What is HSTS?
Why include X-Frame-Options + X-Content-Type? Are all X-* headers app-specific?
Define Content Security Policy?
How do I implement virus scanning easily with Azure for file uploads? Is there a cloud-agnostic way or service?
How do style cop & Editor Config help code quality? What other tools or systems can help?
What is TDD? How do i think in a TDD-compliant way?
Deine xUnit, Moq and Fluent Assertions. How does Fluent databuilders work? How do they help TDD-based development? what other tools are important for .net core development with TDD?
Explain how to minimize docker build tie with caching and package management. Can we host a local NuGet for oft-used packages? Would a local NAS improve things?
What are E2E tests?
What is coturn in docker-compose?
Why do we use cryptography vs base Random operations? should we always defer to cryptography?
Why choose a different GUID generator? are there specific ones for specific purposes?
What does it mean to "Conver to minimal .net core APIs"?
Describe Msoquitto brker and alternatives for MQTT -- what is the best practice foodchain from IoT device to database server with minimal cost, maximal deliverability with expiration (events dont matter after X minutes of retry) and maximal edge rorutint to decrease dependence on common database server and rather move the data in in constant fashion without contention. 
In another project, we want to eliminate StreamAnalytics with MQTT data sources and SQL Server output how do we do that? How do we mirror the "hopper" functionality without the cost?
How does Kestrel work? Why is it tied to HTTP/3 in our project?
*How does one properl manage a large enterprise project -- build a primer for a seasoned developer who has largely operated on small teams and now has a large one with a global project.
*Build a  primer for GitHub for a seasoned developer who who has largely operated on small teams and now has a large one with a global project. include specifics on best practices and how best to draft pull requests, commit messages, etc. as well as what "good behavior" looks like?
Can I host my own OAuth server but still allow "Login with..." for GitHub/Microsoft/meta/apple/google etc? When should I and when should I not? Should I always use a provider?
*Write a primer on OAuth implementation, SSO integration and integration with consumer login providers like GitHub/Microsoft/meta/apple/google while retaining the ability to have basic email/password authentication? What are best practices? How can i keep my costs low with 100,000 customers prebuilt but only 2,000 annual users?
Differentiate and Correlate TURN/STUN
How much can raw websocket enhance performance?
*Write a primer on containers from local (docker) to Azure to Terraform (across Azure/GCP/AWS)?
*Write a primer on docker-compose and the docker cli
Explain MQTT->SignalR bridge and how can costs be mitigated for high volume/low utilization (of the data) MQTT sources
For HTTP/3 & QUIC a) explain O-RTT; b) streams/frames, etc.; c) how they are better handled than HTTP 2 and prior; c) what is stream multiplexing; differentiate and explain UDP vs TCP; should we and if so how can we use UDP more broadly in inter service communication?
What is TTL in Redis? Similar to TTL in DNS?
Should we use Porter vs Terraform? Which is better when? If we use Terraform across the board what do we miss out on?
Explain how to setuo Grafana on Prometheus data? Azure Monitor on Application Insights? Kibana for either or both or custom logs?
*Write a primer on KQL, PromQL and any better way to query log data
When is Soccket.IO still needed? Why is it now considered legacy?
Define Micro-services and what they have replaced. Is microservices always better now? 
How does URI(Configuration["services:mediaservice"]) able to create a valid URI? 
*Write a primer on URIs/URLs in large scale systems at enterprise scale? How does DNS work for those large systems?
What does httpClientFactory do?
What does IConnectionMultiplexer do? Is it redis-specific? What does EventBus do? How doesit connect to IConnectionMultiplexer?
How much faster should we expect redis to be that sql server for base data (like types and users) that rarely change?
Wrtie a comprehensive primer on UnitOfWork patterns (and SQLUnitOfWork) especially in multi-step sql transactions like store customer, then order, then items and update the same. 
Explain how a circuit breaker throws a circuit? How does it know when the circuit is broken? why is it important?
Explain the saga patter in detail and how it helps
What does compensations = new Stack<Func<Task>> mean?
Why @vent is in the outbox Message pattern? Why @? 
*Describe the combination of Outbox Messaging, Saga, and UnitOfWork as  combined effort with all the whys and hows
Why does Outbox talk to the event bus? Is SQL faster?
Is BackgroundService predefined in .Net? in the outbox Processor?
Explain idempotency and the the idempotency key is generated and sent from the host? When is a new key created? Why does it matter for caching?
Explain Graceful Degradation especial how it applies to basic and enhanced data returned or stored
Explain best practices with health checks and how to build a qualtity one that doesn't degrade performance
How do health checks internally connect to Prometheus and/or App Insights